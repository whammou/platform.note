#+TITLE: Platform Document Drafts

#+TODO: TODO(t) (e) DOIN(d) PEND(p) OUTL(o) EXPL(x) FDBK(b) WAIT(w) NEXT(n) IDEA(i) | ABRT(a) PRTL(r) RVIW(v) DONE(f)
#+OPTIONS: title:nil tags:nil todo:nil ^:nil f:t num:t pri:nil toc:t
#+LATEX_HEADER: \renewcommand\maketitle{} \usepackage[scaled]{helvet} \renewcommand\familydefault{\sfdefault}
#+FILETAGS: :DOC:DRAFT:PLATFORM:
#+HTML:<details>

* Document Drafts :DOC:DRAFT:PLATFORM:META:
#+HTML:</details>

#+NAME:Warning Message
#+BEGIN_QUOTE
[!WARNING]
Draft items are subjected to change and refile!
#+END_QUOTE
** OUTL Orgmode github hacks :ORGMODE:GITHUB:
:PROPERTIES:
:ID: efbdb9d4-436c-4736-b29f-d85d8c4263c7
:END:
- A curated list of hacks and tricks when exporting an =org= file or when render on github
-----
- *[NOTE]* taken on <2025-07-24 17:35>: \\
  Orgmode export format or github render is based on a package called =org-ruby=
-----
- *Reference:*
  - [[https://github.com/noncog/github-org-mode-hacks][Orgmode github hacks @Github]]
  - [[https://github.com/fniessen/refcard-org-mode][Orgmode Reference Card @Github]]
** WAIT Github Actions :GITHUB:githubactions:
DEADLINE: <2025-10-30 Thu>
/goto: [[id:2d5fffc1-20cd-45f8-994b-638481352951][A Guide to Git @Org]]/
*Github Actions* is a [[id:0ed7cc0d-f624-4dc3-b186-a7b3818d57f4][Continuous Integration and Continuous Delivery @Org]] platform that allows you to automate =build=, =test=, and =deploy=. You can create workflows that build and test every pull request or deploy merged pull requests to production
*** OUTL Basic Workflow
Github actions uses =yaml= syntax to define the workflow. Each workflow is stored as separate YAML file in your code repository, in directory =.github/workflows=
  1. In your repository, create the =.github/workflows= dir to store =workflow= files
  2. In the =.github/workflows= dir, create a new file a =workflow= file
#+NAME:Basic Workflows
#+BEGIN_SRC yaml
name: learn-github-actions
run-name: ${{ github.actor }} is learning GitHub Actions
on: [push]
jobs:
  check-bats-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: npm install -g bats
      - run: bats -v
#+END_SRC
  3. Commit these changes and push them to your Github Repository
- *Reference:* [[https://docs.github.com/en/actions/tutorials/create-an-example-workflow#creating-an-example-workflow][Example Workflow @Github-doc]]
**** Anatomy of a Workflow File
Optional - The name of the workflow as it will appear in the "Actions" tab of the GitHub repository. If this field is omitted, the name of the workflow file will be used instead.
#+src_yaml:[exports code]{name: learn-github-actions}

Optional - The name for workflow runs generated from the workflow, which will appear in the list of workflow runs on your repository's "Actions" tab. This example uses an expression with the `github` context to display the username of the actor that triggered the workflow run. For more information, see [AUTOTITLE](/actions/using-workflows/workflow-syntax-for-github-actions#run-name).
=run-name: ${{ github.actor }} is learning GitHub Actions=

Specifies the trigger for this workflow. This example uses the `push` event, so a workflow run is triggered every time someone pushes a change to the repository or merges a pull request. This is triggered by a push to every branch; for examples of syntax that runs only on pushes to specific branches, paths, or tags, see [AUTOTITLE](/actions/reference/workflow-syntax-for-github-actions#onpushpull_requestpull_request_targetpathspaths-ignore).
=on: [push]=

Groups together all the jobs that run in the `learn-github-actions` workflow.
=jobs:=

Defines a job named `check-bats-version`. The child keys will define properties of the job.
  =check-bats-version:=

Configures the job to run on the latest version of an Ubuntu Linux runner. This means that the job will execute on a fresh virtual machine hosted by GitHub. For syntax examples using other runners, see [AUTOTITLE](/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on)
    =runs-on: ubuntu-latest=

Groups together all the steps that run in the `check-bats-version` job. Each item nested under this section is a separate action or shell script.
    =steps:=

The `uses` keyword specifies that this step will run `v4` of the `actions/checkout` action. This is an action that checks out your repository onto the runner, allowing you to run scripts or other actions against your code (such as build and test tools). You should use the checkout action any time your workflow will use the repository's code.
      =- uses: actions/checkout@v5=

This step uses the `actions/setup-node@v4` action to install the specified version of the Node.js. (This example uses version 20.) This puts both the `node` and `npm` commands in your `PATH`.
#+BEGIN_SRC yaml

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
#+END_SRC

The `run` keyword tells the job to execute a command on the runner. In this case, you are using `npm` to install the `bats` software testing package.
      =- run: npm install -g bats=

Finally, you'll run the `bats` command with a parameter that outputs the software version.
      =- run: bats -v=
- *Visit:* [[https://docs.github.com/en/actions/tutorials/create-an-example-workflow#understanding-the-workflow-file]]

*** OUTL Reusable Workflow
/Use the same workflow on different repos/
- *Visit:* [[https://docs.github.com/en/actions/how-tos/reuse-automations/reuse-workflows#creating-a-reusable-workflow]]
**** Calling a Reusable Workflow
/How to call a reusable workflow/
